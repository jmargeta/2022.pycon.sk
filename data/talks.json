[
  {
    "speakers": [
      "Tom Dyson"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "To be announced...",
    "text": "To be announced..."
  },
  {
    "speakers": [
      "Tom Dyson"
    ],
    "type": "Workshop",
    "lang": "en",
    "title": "Wagtail workshop",
    "text": "To be announced..."
  },
  {
    "speakers": [
      "Mauro Pelucchi"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Nowcasting financial crisis with deep learning techniques",
    "text": "This tutorial shows how apply Regression Models and Deep Learning Models to \nnowcasting stock markets crisis events.\nSpecifically, we'll how the transmission mechanisms across stock markets can \nbe used to train machine learning models to predict crisis events. The tutorial'll show \nthe entire pipeline: from the preparation of the dataset,\nhow balance observations and how measure our performances."
  },
  {
    "speakers": [
      "Mauro Pelucchi"
    ],
    "type": "Workshop",
    "lang": "en",
    "title": "Data Ingestion and Big Data",
    "text": "Web scraping, crawling and API are the first step to retrieve information to use for analysis\nand to start a new business.\nIn this tutorial I'll show you how to use python to set up scraping and crawling processes,\nhow to simulate users navigation and browser behavior with a ghost browser and how to hook up and use data APIs.\nI will also try to explain the technical and ethical aspects that we have to consider when we approach these kinds of challenges."
  },
  {
    "speakers": [
      "Dmitry Dygalo"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Stop writing tests for your web API! Try to generate them first.",
    "text": "Having a comprehensive test suite is a crucial part of modern software development. But often, writing tests at scale is a tiresome and error-prone process. \n\nYou will learn how to save time on testing web APIs, see real-life examples, and tools that will improve your web APIs with minimal effort. \n\nThere will be a showcase of the Hypothesis & Schemathesis libraries that bring property-based testing to the world of web applications. To illustrate its effectiveness I'll share the results from our recent research paper, where we evaluated 8 API fuzzers against 16 real-world open-source services and found over 100 internal server errors."
  },
  {
    "speakers": [
      "Luka Raljević"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Dive into codebase like a pro",
    "text": "How to get familiar with codebase you need to maintain with minimum suffering? How to leave codebase easier to deal with for your colleagues so they don’t have to suffer like you did? \nIf you are experienced developer or a junior just starting your journey, inheriting codebase can be a very challenging task. Especially if the codebase is not quite up to your standards, or it’s just huge and complex beast. \nI will convey my experience and tips and tricks on inheriting code I acquired during 12 years of software development on new and old projects. \nThe talk will provide guidelines to ease taking over code from somebody else, as well as remind developers of the importance that planning, preparation and documentation have in facilitating code change and project growth."
  },
  {
    "speakers": [
      "Dom Weldon"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "It's Your Call(able): a tour of Python's callable (function) interface",
    "text": "Functions are fundamental to python, and are amongst the first features of python that most users learn. We call a function with arguments, and it returns a value. However, there is more to this callable interface than meets the eye, and there are lots of useful and powerful things we can do with the callable interface. You may have come across many of these already: (anonymous) lambda functions, the call magic method, the decorator pattern, the doc property, and modules like functools and inspect which provide detailed about functions and allow us to alter functions at runtime. The now-retired Python 3.6 release added typing annotations to this mix, and opened up a new world of metadata to use alongside your callables.\n\nLots of libraries, particularly web frameworks like Flask, Django, and FastAPI, and testing toolkits like pytest, use this callable interface to implement their API. As developers, understanding these advanced features of python’s callable interface is particularly useful when writing generic, automation focused code, and understanding how such prominent libraries work.\n\nThis talk gives a deep-dive into python functions, and the associated callable interface. We’ll start with a quick tour of the basics, before covering python’s more advanced callable features, and exploring some examples about how, why, and when you may wish to use these features yourself."
  },
  {
    "speakers": [
      "Petr Šebek"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Where good engineering practices would save the day",
    "text": "As software engineers we’ve read about countless rules (SOLID, DRY, YAGNI, KISS, …), read many books (The Pragmatic Programmer, Clean Code, The DevOps Handbook, Refactoring, …) and we are sharpening our understanding of how the ideal code should look like every day during our job.\n\nBut the reality is not ideal, sometimes quite far from the ideal.\n\nLet’s look at a few examples where good engineering practices were ignored which caused massive damages to the companies that weren’t following them. We will look at practices that would prevent the situations from happening. Stories like this will hopefully remind us why good engineering practices are necessary and maybe even help us to recognize which are more important than the others."
  },
  {
    "speakers": [
      "Michal Kaukič",
      "Marcel Puškárik"
    ],
    "type": "Workshop",
    "lang": "sk",
    "title": "Pyviz panel a interaktívne webové aplikácie",
    "text": "Panel je momentálne najuniverzálnejší prostriedok na tvorbu \"dashboards\", plnohodnotných interaktívnych aplikácií. Je veľmi vhodný na pútavé grafické znázornenie, spracovanie dát a interakciu s používateľom. Ukážeme princíp na jednoduchej aplikácii a potom vytvoríme prezerač psov v Prešove na mape, kde si budeme môcť voliť plemeno, ulicu, atď. Mimochodom zavadíme o prácu s SQL (sqlite) databázou psov. Potrebný je len webový prehliadač (Firefox, Chromium) a prístup na internet."
  },
  {
    "speakers": [
      "Artur Patoka"
    ],
    "type": "Workshop",
    "lang": "en",
    "title": "Accelerate Python development using live PyCharm debugging",
    "text": "In this workshop we’ll walk through some of the awesome features of the built-in PyCharm debugger. I’ll start with a quick overview of the fundamentals and then move on to how to use the debugger as a highly efficient development tool, much more than a simple bug finder. We’ll focus on examples - in a live coding session I’ll show you some super simple demos using Flask, Selenium, pandas and pytest. Most of this workshop’s content will be applicable regardless of the Python area you are interested in. I’ll be using PyCharm Pro but most of the features discussed are available in the community edition and those exclusive to the paid version will be marked."
  },
  {
    "speakers": [
      "Umut Nefta Kanilmaz"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Understanding the evolution and spread of conspiracy theories using Twitter user network data",
    "text": "In the beginning of 2020, the so-called \"Querdenken\" movement formed: a protest movement that critized government regulations concerning the containment of the COVID-19 pandemic. This movement reached popularity in Austria and radicalized as more and more right-wing extremist players appeared.\n\nI want to show you how I study the spatio-temporal evolution of the Querdenken movement in Austria by analyzing the social network of Twitter users. For this, I will briefly explain how social networks can be modeled with basic graph theory. This approach then allows to determine central players and learn about potential communities within the movement. Combining the user information with the geographic view, we can understand how the movement organized and spread across Central Europe. I will lay a particular focus on how I retrieve, store and handle the data needed for my analysis and talk about the Python libraries and database tools I considered and used."
  },
  {
    "speakers": [
      "Štěpán Bechynský"
    ],
    "type": "Talk",
    "lang": "cz",
    "title": "Python, Raspberry Pi a Grove",
    "text": "Elektronická stavebnice Grove od společnosti Seeed https://wiki.seeedstudio.com/Grove_System/ je určena zejména začítečníkům bez znalosti elektroniky. V přednášce uvidíte, jak nainstalovat Python SDK, jak stavebnice vypadá a jak se připojuje k Raspberry Pi."
  },
  {
    "speakers": [
      "Miroslav Šedivý"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Your Name is Invalid!",
    "text": "People have names. Most people do. People have first names and last names. Many people do. People have any sorts of names that often don’t fit fixed fields in the forms. These names may contain letters, accented letters, and other characters, that may cause problems to your code depending on the encoding you use. They may look differently in uppercase and lowercase, or may not be case foldable at all. Searching and sorting these names may be tricky too. And if you design an application, web form, and/or database dealing with personal names, you’ll have to take that into account."
  },
  {
    "speakers": [
      "Vojta Filipec"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Set up an interactive map in browser in a few steps",
    "text": "Maps are popular means to visualise geospatial data. Companies often possess datapoints with latitute and longitude; nonetheless, data analysts typically lack skills to visualise this data as a map. This talk explains how to set up a map with your custom data in a web browser. We are going to talk about library `folium` that takes care of renderring the map, and how to feed your custom data into it. Optionally, we could extend the scope by geometries/methods to delimit areas and geojson format to record areas and the data layer in one file. The resulting map will be comparable to mapakriminality.cz or mapaexekuci.cz that gained on popularity over the past few years and contributed to society-wide discussion on important topics. I will show pieces of code to demonstrate key concepts at the journey towards getting the map, and eventually will demonstrate the concepts on a map I have been working on."
  },
  {
    "speakers": [
      "Tomás Sabat"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Building an Open Source Threat Intelligence Platform with STIX",
    "text": "Knowledge of cyber threats is a key focus in cyber security. In this talk, we present an open source threat intelligence platform to store and manage such knowledge built with Python and TypeDB. It enables cyber threat intelligence professionals to bring together their disparate threat intel into one database, enabling them to easily manage such data and discover new insights about cyber threats.\n\nWe describe how we used TypeDB to represent the STIX 2.1 specification and Python to load the MITRE ATT&CK dataset. We cover how we leverage modelling constructs such as type hierarchies, nested relations, hyper relations, unique attributes, and logical inference, to create the most accurate representation of CTI data."
  },
  {
    "speakers": [
      "Anastasiia Tymoshchuk"
    ],
    "type": "Talk",
    "lang": "en",
    "title": "Continuous Documentation for your Python code",
    "text": "Do you document your code? Do you think it is important?\n\nImagine that you need to get back to your code in 6 month after you wrote it, there is always a big possibility that you will have to spend some time to find out how this code works. Or if someone else wrote some code, which is already in production and your task is to fix a bug in it and there is no documentation and no one actually knows what this code does.\n\nThere are more benefits of implementing continuous documentation for the code:\n\n- easy to onboard new team members,\n- easy to share knowledge,\n- if this code is open source - easy to start contributing,\n- easy to see purpose and motivation of each piece of code,\n- easy to keep versioning for each new release of the code.\n\nIt this talk I will show the difference between documentation types and will show a demo in the end of the talk."
  }
]